// Generated by Microsoft Cadl

export interface CommentRequest {
  contents: string;
}

export interface CreateCommentResult {
  statusCode: 200;
  id: string;
  contents: string;
  sentiment: string;
}

export interface GetCommentResult {
  statusCode: 200;
  id: string;
  contents: string;
  sentiment: string;
}

export interface Comment {
  id: string;
  contents: string;
  sentiment: string;
}

interface CommentsClientSettings {
  baseUrl: string | URL;
}

export class CommentsClient {
  private _settings: CommentsClientSettings;

  constructor(baseUrl: string | URL) {
    this._settings = {
      baseUrl,
    };
  }

  async createComment(comment: CommentRequest): Promise<CreateCommentResult> {
    const path = `/comments`;
    const resource = new URL(this._settings.baseUrl + path).toString();

    const res = await fetch(resource, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(comment),
    });

    if (res.status < 200 || res.status >= 400) {
      const response = await res.json();
      const e = new Error(response.message);
      throw Object.assign(e, response);
    }

    return res.json();
  }

  async getComment(id: string): Promise<GetCommentResult> {
    const path = `/comments/${id}`;
    const resource = new URL(this._settings.baseUrl + path).toString();

    const res = await fetch(resource, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (res.status < 200 || res.status >= 400) {
      const response = await res.json();
      const e = new Error(response.message);
      throw Object.assign(e, response);
    }

    return res.json();
  }

  async listComments(): Promise<Comment[]> {
    const path = `/comments`;
    const resource = new URL(this._settings.baseUrl + path).toString();

    const res = await fetch(resource, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (res.status < 200 || res.status >= 400) {
      const response = await res.json();
      const e = new Error(response.message);
      throw Object.assign(e, response);
    }

    return res.json();
  }
}

const fetch =
  typeof globalThis.fetch === "undefined"
    ? (await import("node-fetch")).default
    : globalThis.fetch;
